{"version":3,"sources":["webpack:///./src/pages/components/color.js","webpack:///./node_modules/select/src/select.js"],"names":["CopyButton","_this","_React$Component","call","this","handleClick","e","select","ghost","document","execCommand","render","_this2","child","React","Children","only","props","children","cloneElement","onClick","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","ref","text","style","position","zIndex","opacity","Component","colors","Object","keys","theme","filter","key","test","map","name","value","color","Array","isArray","primaries","grays","ColorChip","styled","Box","withConfig","displayName","componentId","HexButton","button","ColorCard","_ref2","pcln_design_system__WEBPACK_IMPORTED_MODULE_8__","borderWidth","m","bg","p","fontSize","mb","align","Column","assign","width","px","ColorList","Color","wrap","mx","pt","__webpack_require__","module","exports","element","selectedText","nodeName","focus","isReadOnly","hasAttribute","setAttribute","setSelectionRange","length","removeAttribute","selection","window","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","toString"],"mappings":"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","file":"component---src-pages-components-color-js-88cedd4653e950e0ec2a.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Card, Flex, Heading, Text, Divider, theme } from 'pcln-design-system'\nimport select from 'select'\n// import { PageTitle, Description, Code } from '../src/components'\n\nclass CopyButton extends React.Component {\n  constructor() {\n    super()\n\n    this.handleClick = e => {\n      select(this.ghost)\n      document.execCommand('copy')\n    }\n  }\n\n  render() {\n    const child = React.Children.only(this.props.children)\n    const clone = React.cloneElement(child, {\n      onClick: this.handleClick,\n    })\n\n    return [\n      clone,\n      <div\n        ref={ref => (this.ghost = ref)}\n        children={this.props.text}\n        style={{\n          position: 'absolute',\n          zIndex: -1,\n          opacity: 0,\n        }}\n      />,\n    ]\n  }\n}\n\nconst colors = Object.keys(theme.colors)\n  .filter(key => !/[0-9]$/.test(key))\n  .map(key => ({\n    name: key,\n    value: theme.colors[key],\n  }))\n  .filter(color => !Array.isArray(color.value))\n\nconst primaries = colors.filter(color => !/^(lightGray|gray|borderGray|darkGray)$/.test(color.name))\nconst grays = colors.filter(color => /^(lightGray|gray|borderGray|darkGray)$/.test(color.name))\n\nconst ColorChip = styled(Box)`\n  height: 100px;\n  width: 100%;\n  border-radius: 2px 2px 0 0;\n  transition: all 0.1s ease;\n`\n\nconst HexButton = styled.button`\n  width: 100%;\n  display: inline-block;\n  position: relative;\n  font-family: inherit;\n  font-size: 12px;\n  margin: 0;\n  padding: 0;\n  color: inherit;\n  text-align: left;\n  background-color: transparent;\n  border: 0;\n  border-radius: 0;\n  appearance: none;\n  transition: all 0.125s ease;\n  box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.08);\n\n  &:hover {\n    box-shadow: 0 8px 8px 0 rgba(0, 0, 0, 0.08), 0 16px 16px 0 rgba(0, 0, 0, 0.08);\n  }\n\n  &:active {\n    transform: scale(0.9);\n  }\n\n  & > span {\n    top: 0;\n    left: 0;\n    position: absolute;\n    font-size: 12px;\n    padding: 8px 0;\n    width: 100%;\n    color: #fff;\n    border-radius: 2px 2px 0 0;\n    background-color: #001833;\n    text-align: center;\n    opacity: 0;\n    transition-property: opacity;\n    transition-duration: 0.125s;\n    transition-timing-function: ease-out;\n  }\n\n  &:hover > span {\n    opacity: 1;\n  }\n`\n\nconst ColorCard = ({ name, value }) => (\n  <Card borderWidth={0} m={0}>\n    <CopyButton text={value}>\n      <HexButton>\n        <ColorChip bg={value} />\n        <span>Press to copy</span>\n        <Box p={2}>\n          <Text fontSize={1} mb={1} align=\"left\">\n            {name}\n          </Text>\n          {/* <Code fontSize={1} align=\"left\" color=\"gray\">\n            {value}\n          </Code> */}\n        </Box>\n      </HexButton>\n    </CopyButton>\n  </Card>\n)\n\nconst Column = props => <Box {...props} width={[1 / 2, null, 1 / 3, 1 / 4, 1 / 6]} mb={4} px={2} />\n\nconst ColorList = props =>\n  props.colors.map(color => (\n    <Column key={color.key}>\n      <ColorCard {...color} />\n    </Column>\n  ))\n\nconst Color = props => (\n  <Box>\n    {/* <PageTitle>Color</PageTitle> */}\n    {/* <Description>\n      The design system includes a color palette of several primary colors,\n      along with light and dark variations.\n    </Description> */}\n    <Flex wrap mx={-2} pt={4}>\n      <ColorList colors={primaries} />\n      <ColorList colors={grays} />\n    </Flex>\n  </Box>\n)\n\nexport default Color\n","require(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nfunction select(element) {\n  var selectedText;\n\n  if (element.nodeName === 'SELECT') {\n    element.focus();\n    selectedText = element.value;\n  } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n    var isReadOnly = element.hasAttribute('readonly');\n\n    if (!isReadOnly) {\n      element.setAttribute('readonly', '');\n    }\n\n    element.select();\n    element.setSelectionRange(0, element.value.length);\n\n    if (!isReadOnly) {\n      element.removeAttribute('readonly');\n    }\n\n    selectedText = element.value;\n  } else {\n    if (element.hasAttribute('contenteditable')) {\n      element.focus();\n    }\n\n    var selection = window.getSelection();\n    var range = document.createRange();\n    range.selectNodeContents(element);\n    selection.removeAllRanges();\n    selection.addRange(range);\n    selectedText = selection.toString();\n  }\n\n  return selectedText;\n}\n\nmodule.exports = select;"],"sourceRoot":""}