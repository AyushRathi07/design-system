(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{"i/q+":function(n,a,e){"use strict";e.r(a);var t=e("Ff2n"),o=e("q1tI"),p=e.n(o),r=e("6qfE"),m=p.a.createElement;a.default=function(n){var a=n.components;Object(t.a)(n,["components"]);return m(r.MDXTag,{name:"wrapper",components:a},m(r.MDXTag,{name:"h1",components:a,props:{id:"rangeslider"}},m(r.MDXTag,{name:"a",components:a,parentName:"h1",props:{href:"#rangeslider","aria-hidden":"true"}},m(r.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon icon-link"}})),"RangeSlider"),m(r.MDXTag,{name:"p",components:a},"A single or multi-value range input based on ",m(r.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://github.com/react-component/slider"}},"react-component-slider")),m(r.MDXTag,{name:"pre",components:a},m(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-.jsx",metaString:""}},"<RangeSlider\n  min={0}\n  max={100}\n  defaultValue={[8, 64]}\n/>\n")),m(r.MDXTag,{name:"h2",components:a,props:{id:"props"}},m(r.MDXTag,{name:"a",components:a,parentName:"h2",props:{href:"#props","aria-hidden":"true"}},m(r.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon icon-link"}})),"Props"),m(r.MDXTag,{name:"table",components:a},m(r.MDXTag,{name:"thead",components:a,parentName:"table"},m(r.MDXTag,{name:"tr",components:a,parentName:"thead"},m(r.MDXTag,{name:"th",components:a,parentName:"tr",props:{align:null}},"Prop"),m(r.MDXTag,{name:"th",components:a,parentName:"tr",props:{align:null}},"Type"),m(r.MDXTag,{name:"th",components:a,parentName:"tr",props:{align:null}},"Description"))),m(r.MDXTag,{name:"tbody",components:a,parentName:"table"},m(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},m(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"min")),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"number"),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"The minimum value of the slider")),m(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},m(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"max")),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"number"),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"The maximum value of the slider")),m(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},m(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"defaultValue")),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"array"),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Set initial value of slider")),m(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},m(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"value")),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"array"),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Set current value of slider")),m(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},m(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"onChange")),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"function"),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"triggered when value changes")),m(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},m(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"ariaLabelGroupForHandles")),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"array (strings)"),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Set aria-label for each handle")),m(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},m(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"ariaLabelledByGroupForHandles")),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"array (strings)"),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Set aria-labelledby for each handle")),m(r.MDXTag,{name:"tr",components:a,parentName:"tbody"},m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},m(r.MDXTag,{name:"inlineCode",components:a,parentName:"td"},"ariaValueTextFormattersForHandles")),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"array (functions)"),m(r.MDXTag,{name:"td",components:a,parentName:"tr",props:{align:null}},"Pass a function to each handle to calculate aria-valuetext from value")))),m(r.MDXTag,{name:"p",components:a},"For more props, see the ",m(r.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://github.com/react-component/slider"}},"react-component-slider docs")))}},u8aW:function(n,a,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/RangeSlider",function(){return e("i/q+")}])}},[["u8aW",0,1,2]]]);